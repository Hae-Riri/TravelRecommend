import pandas as pd

personal17 = pd.read_excel('personal_2017.xlsx')
place17 = pd.read_excel('place_2017.xlsx')
travel17 = pd.read_excel('travel_2017.xlsx')

personal16 = pd.read_excel('personal_2016.xlsx')
place16 = pd.read_excel('place_2016.xlsx')
travel16 = pd.read_excel('travel_2016.xlsx')

personal15 = pd.read_excel('personal_2015.xlsx')
place15 = pd.read_excel('place_2015.xlsx')
travel15 = pd.read_excel('travel_2015.xlsx')
# preprocessing

personal17 = personal17[["PID", "sex", "age", "sido", "occ1", "fac", 
                         "marry", "inc1_1"]]
personal16 = personal16[["pid", "sex", "age", "sido", "occ1", "fac", 
                  "marry", "inc1_1"]]
personal15 = personal15[["pid", "sex", "age", "sido", "occ1", "fac", 
                  "marry", "inc1_1"]]

place17 = place17[["PID", "q6_1", "q6_1_1", "q6_3_a", "q6_3_b", "q6_3_c", 
                   "q6_6_1", "q6_6_2", "q6_6_3", "q6_6_4", "q6_6_5", "q6_6_6",
                   "q6_6_7", "q6_6_8", "q6_6_9", "q6_6_10", "q6_6_11", "q6_6_12",
                   "q6_6_13", "q6_6_14", "q6_6_15", "q6_6_16", "q6_6_17", "q6_6_18",
                   "q6_6_19", "q6_6_20", "q6_6_21",
                  "q6_8", "q6_9"]]
place16 = place16[["pid", "q6_1", "q6_1_1", "q6_2_a", "q6_2_b", "q6_2_c", 
                   "q6_5_1", "q6_5_2", "q6_5_3", "q6_5_4", "q6_5_5", "q6_5_6",
                   "q6_5_7", "q6_5_8", "q6_5_9", "q6_5_10", "q6_5_11", "q6_5_12",
                   "q6_5_13", "q6_5_14", "q6_5_15", "q6_5_16", "q6_5_17", "q6_5_18",
                   "q6_5_19", "q6_5_20", "q6_5_21",
                  "q6_7", "q6_8"]]
place15 = place15[["PID", "q6_1", "q6_1_1", "q6_2_a", "q6_2_b", "q6_2_c", 
                   "q6_5_1", "q6_5_2", "q6_5_3", "q6_5_4", "q6_5_5", "q6_5_6",
                   "q6_5_7", "q6_5_8", "q6_5_9", "q6_5_10", "q6_5_11", "q6_5_12",
                   "q6_5_13", "q6_5_14", "q6_5_15", "q6_5_16", "q6_5_17", "q6_5_18",
                   "q6_5_19", "q6_5_20", "q6_5_21",
                  "q6_7", "q6_8"]]

travel17 = travel17[["PID","type1","Month","q3","q4_a","q5_1","q5_2_1","q5_2_2","q5_2_3","q5_2_4"
                     ,"q5_2_5","q5_2_6","q7","q9"]]
travel16 = travel16[["pid", "type1", "month", "q3", "q4_a", "q5_1",
                    "q5_2_1", "q5_2_2", "q5_2_3", "q5_2_4", "q5_2_5", "q5_2_6",
                    "q7_c", "q10"]]
travel15 = travel15[["PID", "type1", "month", "q3", "q4_a", "q5_1",
                    "q5_2_1", "q5_2_2", "q5_2_3", "q5_2_4", "q5_2_5", "q5_2_6",
                    "q7_c", "q10"]]

personal17.columns = ["pid", "sex", "age", "sido", "job", "family", 
                         "marry", "income"]
personal16.columns = ["pid", "sex", "age", "sido", "job", "family", 
                         "marry", "income"]
personal15.columns = ["pid", "sex", "age", "sido", "job", "family", 
                         "marry", "income"]


place17.columns = ["pid", "country", "city", "reason_first", "reason_second", "reason_third", 
                  "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc",
                   "revisit", "recommend"]
place16.columns = ["pid", "country", "city", "reason_first", "reason_second", "reason_third", 
                  "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc",
                   "revisit", "recommend"]
place15.columns = ["pid", "country", "city", "reason_first", "reason_second", "reason_third", 
                  "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc",
                   "revisit", "recommend"]

travel17.columns = ["pid","type","month","purpose","inform","num_people",
                    "relation1","relation2","relation3","relation4","relation5",
                    "relation6","cost","travel_item"]
travel16.columns = ["pid","type","month","purpose","inform","num_people",
                    "relation1","relation2","relation3","relation4","relation5",
                    "relation6","cost","travel_item"]
travel15.columns = ["pid","type","month","purpose","inform","num_people",
                    "relation1","relation2","relation3","relation4","relation5",
                    "relation6","cost","travel_item"]

# data17
travel17 = travel17.drop_duplicates('pid',keep='first')
place17 = place17.drop_duplicates('pid',keep='first')

data17 = pd.merge(personal17, travel17, on = 'pid')
data17 = pd.merge(data17, place17, on = 'pid')

data17 = data17[["pid", "sex", "age", "job", "family", "marry", "income", "country", "city", 
                "reason_first", "recommend", "type", "month", "purpose", "num_people", 
                 "relation1","relation2","relation3","relation4","relation5",
                "relation6","cost", "travel_item", 
                 "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc"
                ]]

data17 = data17[data17.type == 2]

data17["num_people"] = data17["num_people"].fillna(0)
data17["relation1"] = data17["relation1"].fillna(0)
data17["relation2"] = data17["relation2"].fillna(0)
data17["relation3"] = data17["relation3"].fillna(0)
data17["relation4"] = data17["relation4"].fillna(0)
data17["relation5"] = data17["relation5"].fillna(0)
data17["relation6"] = data17["relation6"].fillna(0)
data17.isnull().sum()
data17['relation'] = data17[['relation1', 'relation2', 'relation3',
                            'relation4', 'relation5', 'relation6']].sum(axis=1)
data17.drop(labels = ['relation1', 'relation2', 'relation3',
                    'relation4', 'relation5', 'relation6'], 
            axis = 1, inplace = True)

# data16
travel16 = travel16.drop_duplicates('pid',keep='first')
place16 = place16.drop_duplicates('pid',keep='first')

data16 = pd.merge(personal16, travel16, on = 'pid')
data16 = pd.merge(data16, place16, on = 'pid')
data16 = data16[["pid", "sex", "age", "job", "family", "marry", "income", "country", "city", 
                "reason_first", "recommend", "type", "month", "purpose", "num_people", 
                 "relation1","relation2","relation3","relation4","relation5",
                "relation6","cost", "travel_item", 
                 "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc"
                ]]
data16 = data16[data16.type == 2]
data16["num_people"] = data16["num_people"].fillna(0)
data16["relation1"] = data16["relation1"].fillna(0)
data16["relation2"] = data16["relation2"].fillna(0)
data16["relation3"] = data16["relation3"].fillna(0)
data16["relation4"] = data16["relation4"].fillna(0)
data16["relation5"] = data16["relation5"].fillna(0)
data16["relation6"] = data16["relation6"].fillna(0)
data16['relation'] = data16[['relation1', 'relation2', 'relation3',
                            'relation4', 'relation5', 'relation6']].sum(axis=1)
data16.drop(labels = ['relation1', 'relation2', 'relation3',
                    'relation4', 'relation5', 'relation6'], 
            axis = 1, inplace = True)
data16['pid'] = data16['pid'] + 1000000

# data15
travel15 = travel15.drop_duplicates('pid',keep='first')
place15 = place15.drop_duplicates('pid',keep='first')

data15 = pd.merge(personal15, travel15, on = 'pid')
data15 = pd.merge(data15, place15, on = 'pid')
data15 = data15[["pid", "sex", "age", "job", "family", "marry", "income", "country", "city", 
                "reason_first", "recommend", "type", "month", "purpose", "num_people", 
                 "relation1","relation2","relation3","relation4","relation5",
                "relation6","cost", "travel_item", 
                 "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc"
                ]]
data15 = data15[data15.type == 2]
data15["num_people"] = data15["num_people"].fillna(0)
data15["relation1"] = data15["relation1"].fillna(0)
data15["relation2"] = data15["relation2"].fillna(0)
data15["relation3"] = data15["relation3"].fillna(0)
data15["relation4"] = data15["relation4"].fillna(0)
data15["relation5"] = data15["relation5"].fillna(0)
data15["relation6"] = data15["relation6"].fillna(0)
data15['relation'] = data15[['relation1', 'relation2', 'relation3',
                            'relation4', 'relation5', 'relation6']].sum(axis=1)
data15.drop(labels = ['relation1', 'relation2', 'relation3',
                    'relation4', 'relation5', 'relation6'], 
            axis = 1, inplace = True)
data15['pid'] = data15['pid'] + 2000000

data17['country'] = data17['country'].astype(int)
data16['country'] = data16['country'].astype(int)
data15['country'] = data15['country'].astype(int)

data16 = data16[data16.country < 300]
data15 = data15[data15.country < 300]

data = data17.append(data16)
data = data.append(data15)

data = data.fillna(0)

data["act_nature"] = data["act_nature"].map(lambda i: i/1 if i > 0 else 0).astype(int)
data["act_food"] = data["act_food"].map(lambda i: i/2 if i > 0 else 0).astype(int)
data["act_sports"] = data["act_sports"].map(lambda i: i/3 if i > 0 else 0).astype(int)
data["act_history"] = data["act_history"].map(lambda i: i/4 if i > 0 else 0).astype(int)
data["act_play"] = data["act_play"].map(lambda i: i/5 if i > 0 else 0).astype(int)
data["act_rest"] = data["act_rest"].map(lambda i: i/6 if i > 0 else 0).astype(int)
data["act_spa"] = data["act_spa"].map(lambda i: i/7 if i > 0 else 0).astype(int)
data["act_shop"] = data["act_shop"].map(lambda i: i/8 if i > 0 else 0).astype(int)
data["act_culture"] = data["act_culture"].map(lambda i: i/9 if i > 0 else 0).astype(int)
data["act_watchgame"] = data["act_watchgame"].map(lambda i: i/10 if i > 0 else 0).astype(int)
data["act_festival"] = data["act_festival"].map(lambda i: i/11 if i > 0 else 0).astype(int)
data["act_program"] = data["act_program"].map(lambda i: i/12 if i > 0 else 0).astype(int)
data["act_religion"] = data["act_religion"].map(lambda i: i/13 if i > 0 else 0).astype(int)
data["act_gambling"] = data["act_gambling"].map(lambda i: i/14 if i > 0 else 0).astype(int)
data["act_citytour"] = data["act_citytour"].map(lambda i: i/15 if i > 0 else 0).astype(int)
data["act_film"] = data["act_film"].map(lambda i: i/16 if i > 0 else 0).astype(int)
data["act_visit"] = data["act_visit"].map(lambda i: i/17 if i > 0 else 0).astype(int)
data["act_meeting"] = data["act_meeting"].map(lambda i: i/18 if i > 0 else 0).astype(int)
data["act_edu"] = data["act_edu"].map(lambda i: i/19 if i > 0 else 0).astype(int)
data["act_entertain"] = data["act_entertain"].map(lambda i: i/20 if i > 0 else 0).astype(int)
data["act_etc"] = data["act_etc"].map(lambda i: i/21 if i > 0 else 0).astype(int)

data["income"] = data["income"].map(lambda i: i/1000 if i > 0 else 0).astype(int)
data["cost"] = data["cost"].map(lambda i: i/100000 if i > 0 else 0).astype(int)

data['season'] = 0
data.loc[(data["month"] <= 2), 'season'] = 3
data.loc[(data["month"] >= 12), 'season'] = 3
data.loc[(data["month"] >= 3) & (data['month'] <= 5), 'season'] = 0
data.loc[(data["month"] >= 6) & (data["month"]<= 8), 'season'] = 1
data.loc[(data["month"] >= 9) & (data["month"] <= 11), 'season'] = 2
data["season"] = data["season"].astype(int)
data.drop(labels = ['month'], axis = 1, inplace = True)

data['country_city'] = data['country'].astype(int)*1000 + data['city'].astype(int)
data.drop(labels = ['country'], axis = 1, inplace = True)
data.drop(labels = ['city'], axis = 1, inplace = True)

act_data_pid.head()

act_data_pid = data[["pid", "act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc", "country_city"]]

act_data = data[["act_nature", "act_food", "act_sports", "act_history", "act_play",
                   "act_rest", "act_spa", "act_shop", "act_culture", "act_watchgame",
                   "act_festival", "act_program", "act_religion", "act_gambling", 
                   "act_citytour", "act_film", "act_visit", "act_meeting", 
                   "act_edu", "act_entertain", "act_etc"]]

noact_data_pid = data[["pid", "sex", "age", "job", "family", "marry", "income",
                "reason_first", "recommend", "type", "season", "purpose", "num_people", 
                 "relation", "cost", "travel_item", "country_city"
                      ]]

noact_data = data[["sex", "age", "job", "family", "marry", "income",
                "reason_first", "recommend", "type", "season", "purpose", "num_people", 
                 "relation", "cost", "travel_item"
                ]]

import random
random.seed(1)
for i in range(721):
    for j in range(0,21):
        if act_data.values[i][j] != 0:
            act_data.values[i][j] = random.randrange(1,6)

act_data_pid = pd.concat([data['pid'], act_data, data['country_city']], axis=1)

act_data_pid.loc[0] = [1714257,1,2,4,5,3,0,5,3,2,4,4,4,0,0,0,0,4,5,2,3,4,171004]
act_data_pid.loc[1] = [1613413,0,5,0,0,3,4,0,2,3,0,0,0,2,0,0,0,0,0,0,0,0,39002]
act_data_pid.loc[2] = [1712377,3,3,2,0,2,3,0,4,0,0,0,0,0,0,5,0,0,0,0,0,5,70018]

act_data_pid.head()


# 유클리드 거리
# act 데이터

from math import sqrt
from collections import OrderedDict
import warnings
warnings.filterwarnings('ignore')

pid_count = act_data_pid[['pid']]
pid_count['count'] = 0

def sim_distance(data, name1, name2):
    s = 0
    for i in act_data:
        if (int(data[data.pid == name1][i]) is not 0) and (int(data[data.pid == name2][i]) is not 0):
            pid_count.loc[pid_count.pid == name2, 'count'] += 1
            s += pow(int(act_data_pid[act_data_pid.pid == name1][i]) - int(act_data_pid[act_data_pid.pid == name2][i]),2)
            
    return sqrt(s)

def top_match(data, name, index = 10, sim_function = sim_distance):
    li = []
    for i in data["pid"]:
        sim_function(data, name, i)
        if (name is not i) and (int(pid_count.loc[pid_count.pid == i, 'count']) is not 0):
            li.append((sim_function(data, name, i) / int(pid_count.loc[pid_count.pid == i, 'count']), i)) 
    li.sort()
    
    c = []
    for i in range(index):
        if int(data.loc[data.pid == li[i][1], "country_city"]) is not int(data.loc[data.pid == name, "country_city"]):
            c.append(int(data.loc[data.pid == li[i][1], "country_city"]))
        c = list(OrderedDict.fromkeys(c))
    return c

top_match(act_data_pid, 1613413)
# print(top_match(act_data_pid, 1714257))
# print(top_match(act_data_pid, 1712377))


# 평균제곱차이 유사도
# act 데이터

from collections import OrderedDict

def sim_msd(data, name1, name2):
    s = 0
    count = 0
    for i in act_data[data.pid == name1]:
        s += pow(int(data[data.pid == name1][i]) - int(data[data.pid == name2][i]), 2)
        count += 1
        
    return 1 / (1 + (s / count))

def top_match(data, name, index = 10, sim_function = sim_msd):
    li = []
    for i in data["pid"]:
        if (name != i):
            li.append((sim_function(data, name, i), i))
    li.sort()
    li.reverse()
    
    c = []
    for i in range(index):
        if int(data.loc[data.pid == li[i][1], "country_city"]) is not int(data.loc[data.pid == name, "country_city"]):
            c.append(int(data.loc[data.pid == li[i][1], "country_city"]))
            c = list(OrderedDict.fromkeys(c))
    
    return c

top_match(act_data_pid, 1000601)


# 코사인 유사도
# act 데이터

from math import sqrt
from collections import OrderedDict

def sim_cosine(data, name1, name2):
    sum_name1 = 0
    sum_name2 = 0
    sum_name1_name2 = 0

    for i in act_data[data.pid == name1]:
        sum_name1 += pow(int(data[data.pid == name1][i]), 2)
        sum_name2 += pow(int(data[data.pid == name2][i]), 2)
        sum_name1_name2 += int(data[data.pid == name1][i]) * int(data[data.pid == name2][i])
        
    return sum_name1_name2 / (sqrt(sum_name1)*sqrt(sum_name2))

def top_match(data, name, index = 10, sim_function = sim_cosine):
    li = []
    for i in data["pid"]:
        if (name != i):
            li.append((sim_function(data, name, i), i))
    li.sort()
    li.reverse()
    
    c = []
    for i in range(index):
        if int(data.loc[data.pid == li[i][1], "country_city"]) is not int(data.loc[data.pid == name, "country_city"]):
            c.append(int(data.loc[data.pid == li[i][1], "country_city"]))
            c = list(OrderedDict.fromkeys(c))
    
    return c

top_match(act_data_pid, 1000601)


# 피어슨 유사도
# act 데이터

from collections import OrderedDict

def sim_pearson(data, name1, name2):
    avg_name1 = 0
    avg_name2 = 0
    count = 0
    for i in act_data[data.pid == name1]:
        avg_name1 = int(data[data.pid == name1][i])
        avg_name2 = int(data[data.pid == name2][i])
        count += 1
        
    avg_name1 = avg_name1 / count
    avg_name2 = avg_name2 / count
    
    sum_name1 = 0
    sum_name2 = 0
    sum_name1_name2 = 0
    count = 0
    for i in act_data[data.pid == name1]:
        sum_name1 += pow(int(data[data.pid == name1][i]) - avg_name1, 2)
        sum_name2 += pow(int(data[data.pid == name2][i]) - avg_name2, 2)
        sum_name1_name2 += (int(data[data.pid == name1][i]) - avg_name1) * (int(data[data.pid == name2][i]) - avg_name2)
        
    return sum_name1_name2 / (sqrt(sum_name1)*sqrt(sum_name2))

def top_match(data, name, index = 10, sim_function = sim_pearson):
    li = []
    for i in data["pid"]:
        if (name != i):
            li.append((sim_function(data, name, i), i))
    li.sort()
    li.reverse()
    
    c = []
    for i in range(index):
        if int(data.loc[data.pid == li[i][1], "country_city"]) is not int(data.loc[data.pid == name, "country_city"]):
            c.append(int(data.loc[data.pid == li[i][1], "country_city"]))
            c = list(OrderedDict.fromkeys(c))
    
    return c

top_match(act_data_pid, 1000601)


